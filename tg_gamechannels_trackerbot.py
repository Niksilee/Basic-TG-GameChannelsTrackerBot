import telebot
from telethon import TelegramClient
from telethon.tl.types import Channel
from collections import defaultdict, Counter
import re
import asyncio
import nest_asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Telebot
telebot.logger.setLevel(logging.WARNING)

# –†–∞–∑—Ä–µ—à–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ event loops
nest_asyncio.apply()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 'YOUR_API_ID'
API_HASH = 'YOUR_API_HASH'
BOT_TOKEN = 'YOUR_BOT_TOKEN'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–∏–π –Ω–∞ –∏—é–ª—å 2024
GAME_SERIES = {
    'Call of Duty': ['cod', 'call of duty', 'modern warfare', 'warzone'],
    'Battlefield': ['battlefield', 'bf'],
    'Assassin\'s Creed': ['assassin\'s creed', 'ac'],
    'FIFA/EA FC': ['fifa', 'ea fc', 'ea sports fc'],
    'Counter-Strike': ['counter-strike', 'cs', 'cs2', 'cs:go'],
    'Dota 2': ['dota 2', 'dota'],
    'League of Legends': ['league of legends', 'lol', 'wild rift'],
    'Valorant': ['valorant'],
    'Apex Legends': ['apex legends', 'apex'],
    'Fortnite': ['fortnite'],
    'GTA': ['gta', 'grand theft auto'],
    'The Witcher': ['witcher', '–≤–µ–¥—å–º–∞–∫'],
    'Cyberpunk 2077': ['cyberpunk', '–∫–∏–±–µ—Ä–ø–∞–Ω–∫'],
    'Elder Scrolls': ['elder scrolls', 'skyrim', 'oblivion'],
    'Fallout': ['fallout'],
    'Starfield': ['starfield'],
    'Star Wars': ['star wars', 'jedi', 'sw'],
    'God of War': ['god of war', 'gow'],
    'The Last of Us': ['the last of us', 'tlou'],
    'Horizon': ['horizon', 'horizon zero dawn', 'horizon forbidden west'],
    'Resident Evil': ['resident evil', 're'],
    'Final Fantasy': ['final fantasy', 'ff'],
    'Diablo': ['diablo'],
    'World of Warcraft': ['world of warcraft', 'wow'],
    'Overwatch': ['overwatch', 'ow'],
    'Minecraft': ['minecraft'],
    'PUBG': ['pubg', 'battlegrounds'],
    'Rainbow Six Siege': ['rainbow six', 'r6', 'r6 siege'],
    'Destiny': ['destiny'],
    'Halo': ['halo'],
    'Tomb Raider': ['tomb raider'],
    'Soulslike': ['dark souls', 'elden ring', 'sekiro', 'bloodborne'],
    'Xbox': ['xbox', 'xbox series'],
    'PlayStation': ['playstation', 'ps5', 'ps4'],
    'Nintendo': ['nintendo', 'switch']
}

# –°—Ç–æ–ø-—Å–ª–æ–≤–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
STOP_WORDS = {
    '–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞',
    '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ',
    '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ',
    '–¥–æ',
    '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ',
    '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑',
    '—Ç–æ–∂–µ',
    '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å',
    '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞',
    '–º–æ–∂–Ω–æ',
    '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ',
    '–≤—Å–µ–≥–æ',
    '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞',
    '–ª—É—á—à–µ',
    '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É', 'game', '–∏–≥—Ä–∞', '–∏–≥—Ä', '–∏–≥—Ä—ã',
    '—Ä–µ–ª–∏–∑', '–æ–±–∑–æ—Ä', '–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤—ã–π', '–Ω–æ–≤–æ—Å—Ç–µ–π', '–Ω–æ–≤—ã–µ', '—ç—Ç–æ', '—ç—Ç–∏', '—ç—Ç–æ—Ç', '—ç—Ç–∞', '—ç—Ç–∏—Ö', '–≤—Å–µ', '–≤–µ—Å—å',
    '—Å–≤–æ–π',
    '–∫–æ—Ç–æ—Ä—ã–π', '–∫–∞–∫', '—Ç–∞–∫', '–Ω–∞–ø—Ä–∏–º–µ—Ä', '–±—É–¥—Ç–æ', '–µ—Å—Ç—å', '–Ω–µ—Ç', '–æ—á–µ–Ω—å', '–ø—Ä–æ—Å—Ç–æ', '—É–∂–µ', '–µ—â–µ', '—Ç–æ–∂–µ', '–ª–∏—à—å',
    '—Ç–æ–ª—å–∫–æ',
    '–¥–∞–∂–µ', '–∏–º–µ–Ω–Ω–æ', '–≤–æ—Ç', '—Ç—É—Ç', '—Ç–∞–º', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '—Å–µ–π—á–∞—Å', '–ø–æ—Ç–æ–º'
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞
TOPIC_KEYWORDS = {
    '–∞–Ω–æ–Ω—Å', '—Ä–µ–ª–∏–∑', '–≤—ã—Ö–æ–¥', '–¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞', '—Ç—Ä–µ–π–ª–µ—Ä', '–≥–µ–π–º–ø–ª–µ–π', '–æ–±–∑–æ—Ä', '—Ä–µ—Ü–µ–Ω–∑–∏—è',
    '–ø–∞—Ç—á', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–∞–ø–¥–µ–π—Ç', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–±–∞–≥—Ñ–∏–∫—Å', '–Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ', '—Ñ–∏—á–∞',
    '—Å–∫—Ä–∏–Ω—à–æ—Ç', '–∞—Ä—Ç', '–∫–æ–Ω—Ü–µ–ø—Ç', '–ø—Ä–µ–≤—å—é', '–∏–Ω—Ç–µ—Ä–≤—å—é', '—ç–∫—Å–∫–ª—é–∑–∏–≤', '—Å–≤–µ–¥–µ–Ω–∏—è', '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
    '–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ', '–ø–æ–∫–∞–∑–∞–Ω–æ', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è', '–∞–Ω–∞–ª–∏–∑', '—Ä–∞–∑–±–æ—Ä', '–æ—Ü–µ–Ω–∫–∞'
}


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = (
        "üéÆ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä–æ–≤—ã—Ö –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "üìä –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/analyze @username_–∫–∞–Ω–∞–ª–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n/analyze @gamenews\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ–∫–∞–∂—É:\n"
        "- –°–∞–º—ã–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–∏–∏\n"
        "- –¢–∏–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø—Ä—è–º–æ–µ/–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ)\n"
        "- –¢–æ–ø-5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ä–∏–∏"
    )
    bot.reply_to(message, help_text)


def preprocess_text(text):
    """–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'http\S+|@\w+|[^\w\s]|[\d_]', ' ', text.lower())
    # –ü—Ä–æ—Å—Ç–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    words = text.split()
    # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
    return [word for word in words if word not in STOP_WORDS and len(word) > 3]


def detect_game_series(text):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–∏–π –≤ —Ç–µ–∫—Å—Ç–µ"""
    mentioned_series = {}
    text_lower = text.lower()

    for series, keywords in GAME_SERIES.items():
        for keyword in keywords:
            # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            if re.search(r'\b' + re.escape(keyword) + r'\b', text_lower):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mention_type = "context"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ç–µ–º—ã –≤–±–ª–∏–∑–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                for topic_keyword in TOPIC_KEYWORDS:
                    # –ò—â–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ä–∞–¥–∏—É—Å–µ 10 —Å–ª–æ–≤ –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    pattern = r'\b' + re.escape(keyword) + r'\b.{0,20}\b' + re.escape(topic_keyword) + r'\b'
                    if re.search(pattern, text_lower):
                        mention_type = "direct"
                        break

                mentioned_series[series] = mention_type
                break

    return mentioned_series


async def fetch_channel_data(username):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
    async with TelegramClient('anon', API_ID, API_HASH) as client:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            channel = await client.get_entity(username)
        except ValueError:
            try:
                channel = await client.get_entity(f'https://t.me/{username}')
            except Exception as e:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª: {str(e)}")

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–æ—Å—Ç–æ–≤
        series_stats = defaultdict(lambda: {
            'direct': 0,
            'context': 0,
            'keywords': defaultdict(int)
        })

        async for message in client.iter_messages(channel, limit=100):
            if message.text:
                text = message.text
                words = preprocess_text(text)

                # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–∏–π –∏ –∏—Ö —Ç–∏–ø
                mentioned_series = detect_game_series(text)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —É–ø–æ–º—è–Ω—É—Ç–æ–π —Å–µ—Ä–∏–∏
                for series, mention_type in mentioned_series.items():
                    series_stats[series][mention_type] += 1

                    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ä–∏–∏
                    for word in words:
                        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–∞–º–æ–π —Å–µ—Ä–∏–∏
                        if not any(kw in word for kw in GAME_SERIES[series]):
                            series_stats[series]['keywords'][word] += 1

        return series_stats


@bot.message_handler(commands=['analyze'])
def analyze_channel(message):
    try:
        command, username = message.text.split()
        username = username.strip('@')
    except ValueError:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /analyze @username_–∫–∞–Ω–∞–ª–∞")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        msg = bot.reply_to(message, f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ @{username}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        loop = asyncio.get_event_loop()
        series_stats = loop.run_until_complete(fetch_channel_data(username))

        if not series_stats:
            bot.reply_to(message, "‚ÑπÔ∏è –í –∫–∞–Ω–∞–ª–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–∏–π.")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        current_date = datetime.now().strftime("%d.%m.%Y")
        result = f"üìä –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: @{username}\n"
        result += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {current_date}\n"
        result += f"üî¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: 100\n\n"

        result += "üéÆ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–∏–π:\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        sorted_series = sorted(
            series_stats.items(),
            key=lambda x: x[1]['direct'] + x[1]['context'],
            reverse=True
        )[:10]  # –¢–æ–ø-10

        for series, stats in sorted_series:
            total = stats['direct'] + stats['context']
            result += f"\n<b>{series}</b>\n"
            result += f"‚Ä¢ –í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total}\n"
            result += f"‚Ä¢ –ü—Ä—è–º—ã–µ: {stats['direct']} (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ –ø–æ—Å—Ç–∞)\n"
            result += f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ: {stats['context']} (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö)\n"

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ä–∏–∏
            keywords = Counter(stats['keywords'])
            top_keywords = keywords.most_common(5)

            if top_keywords:
                result += f"‚Ä¢ –¢–æ–ø-5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: "
                result += ", ".join([f"{word} ({freq})" for word, freq in top_keywords])
            else:
                result += "‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
            result += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —Å–µ—Ä–∏—è—Ö
        result += "\n‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ—Ä–∏–π: "
        result += ", ".join(GAME_SERIES.keys())

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        result += "\n\nüí° <b>–ü—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> - –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–æ–π –ø–æ—Å—Ç–∞"
        result += "\nüí° <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> - –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥—Ä—É–≥–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            bot.delete_message(message.chat.id, msg.message_id)
        except:
            pass

        bot.reply_to(message, result, parse_mode='HTML')

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n\n"
        error_msg += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        error_msg += "1. –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π\n"
        error_msg += "2. –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API\n"
        error_msg += "3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API_ID/API_HASH\n"
        error_msg += "4. –ö–∞–Ω–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        bot.reply_to(message, error_msg)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()